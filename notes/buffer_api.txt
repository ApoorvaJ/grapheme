/*
There are the following kinds of buffers:
1. Mesh buffers. The graph doesn't need to know about these at
   all. They will be created outside the loop.
2. Read: e.g. uniform buffers. The graph needs to know about them for the
   descriptor layouts for each pass. These will be declared in the loop and the
   backing memory will vary for each graph.
3. Write: e.g. light/primitive list produced from a compute shader. Need to
   investigate how these work in Vulkan. They will be declared in the loop.

Vulkan recognizes the following kinds of buffers in its DescriptorType enum:
a. UNIFORM_TEXEL_BUFFER
b. STORAGE_TEXEL_BUFFER
c. UNIFORM_BUFFER
d. STORAGE_BUFFER
e. UNIFORM_BUFFER_DYNAMIC
f. STORAGE_BUFFER_DYNAMIC

See: (https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkDescriptorType.html)
Note that our case 1. Isn't handled, because meshes aren't bound as descriptors.

---

Unresolved questions:
1. How will aliasing work? The same backing memory can be used for different
   intermediate buffers.
2. How will transient resources work? We especially care about carrying forward
   some buffers across frames.
*/
let mut ctx = graphene::Context::new();

let depth_texture = ctx
    .new_texture_relative_size(
        "depth",
        1.0,
        vk::Format::D32_SFLOAT,
        vk::ImageUsageFlags::DEPTH_STENCIL_ATTACHMENT,
        vk::ImageAspectFlags::DEPTH,
    )
    .unwrap();
let environment_sampler = graphene::Sampler::new(&ctx.gpu);
let environment_texture = ctx
    .new_texture_from_file(
        "environment map",
        "assets/textures/env.jpg",
    )
    .unwrap();

loop {

    if !ctx.begin_frame() {
        break;
    }

    // Build and execute render graph
    let mut graph_builder = graphene::GraphBuilder::new();

    /* Step 1: The context creates a buffer handle (hash) from the name,
       registers it in the graph_builder, and then returns it. */
    let uniform_buffer = graph_builder.new_buffer(
            "lit pass uniform buffer",
            std::mem::size_of::<UniformBuffer>()
        ).unwrap();


    /* Step 2: The graph builder registers the buffer handle into the given
       pass. */
    let pass_0 = ctx
        .add_pass(
            &mut graph_builder,
            "forward lit",
            &vec![&ctx.facade.swapchain_textures[ctx.swapchain_idx]],
            Some(depth_texture),
            &ctx.shader_modules,
            &uniform_buffer,
            environment_texture,
            &environment_sampler,
        )
        .unwrap();

    let cmd_buf = ctx.command_buffers[ctx.swapchain_idx];
    /* Step 3: When the graph is built, each buffer handle is allocated a unique
       concrete buffer. */
    let graph = ctx.build_graph(graph_builder);
    ctx.begin_pass(graph, pass_0);
    {
        let ubo = UniformBuffer {
            // ...
        };

        // TODO: Ensure that begin_pass() has been called.
        // TODO: Make this call a method belonging to `graph` instead of `ctx`.
        /* Step 4: First look up the graph, then look up the concrete buffer
           belonging to the buffer handle, then upload to that buffer. */
        ctx.upload_to_buffer(graph, uniform_buffer, &ubo);
        uniform_buffers[ctx.swapchain_idx].upload_data(&ubos, 0, &ctx.gpu);

        unsafe {
            // Bind index and vertex buffers
            // ...

            ctx.gpu.device.cmd_draw_indexed(
                // ...
            );
        }
    }
    ctx.end_pass(graph);

    ctx.end_frame();
}
